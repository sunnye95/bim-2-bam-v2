{
  "version": 3,
  "sources": ["../../node_modules/@arc-web/components/dist/internal/slot.js"],
  "sourcesContent": ["class HasSlotController {\n    constructor(host, ...slotNames) {\n        this.slotNames = [];\n        (this.host = host).addController(this);\n        this.slotNames = slotNames;\n        this.handleSlotChange = this.handleSlotChange.bind(this);\n    }\n    hasDefaultSlot() {\n        return [...this.host.childNodes].some(node => {\n            if (node.nodeType === node.TEXT_NODE && node.textContent.trim() !== '') {\n                return true;\n            }\n            if (node.nodeType === node.ELEMENT_NODE) {\n                const el = node;\n                if (!el.hasAttribute('slot')) {\n                    return true;\n                }\n            }\n            return false;\n        });\n    }\n    hasNamedSlot(name) {\n        return this.host.querySelector(`:scope > [slot=\"${name}\"]`) !== null;\n    }\n    test(slotName) {\n        return slotName === '[default]' ? this.hasDefaultSlot() : this.hasNamedSlot(slotName);\n    }\n    hostConnected() {\n        this.host.shadowRoot.addEventListener('slotchange', this.handleSlotChange);\n    }\n    hostDisconnected() {\n        this.host.shadowRoot.removeEventListener('slotchange', this.handleSlotChange);\n    }\n    handleSlotChange(event) {\n        const slot = event.target;\n        if ((!slot.name && this.slotNames.includes('[default]')) || (!!slot.name && this.slotNames.includes(slot.name))) {\n            this.host.requestUpdate();\n        }\n    }\n}\nfunction getInnerHTML(slot) {\n    const nodes = slot.assignedNodes({ flatten: true });\n    let html = '';\n    [...nodes].forEach(node => {\n        if (node.nodeType === Node.ELEMENT_NODE) {\n            html += node.outerHTML;\n        }\n        if (node.nodeType === Node.TEXT_NODE) {\n            html += node.textContent;\n        }\n    });\n    return html;\n}\nfunction getTextContent(slot) {\n    const nodes = slot.assignedNodes({ flatten: true });\n    let text = '';\n    [...nodes].forEach(node => {\n        if (node.nodeType === Node.TEXT_NODE) {\n            text += node.textContent;\n        }\n    });\n    return text;\n}\nfunction hasSlot(el, name) {\n    if (name) {\n        return el.querySelector(`slot[name='${name}']`) !== null;\n    }\n    return [...el.querySelectorAll('slot')].some(node => !node.hasAttribute('name'));\n}\nexport { HasSlotController, getInnerHTML, getTextContent, hasSlot };\n"],
  "mappings": ";AAAA,IAAM,oBAAN,MAAwB;AAAA,EACpB,YAAY,SAAS,WAAW;AAC5B,SAAK,YAAY,CAAC;AAClB,KAAC,KAAK,OAAO,MAAM,cAAc,IAAI;AACrC,SAAK,YAAY;AACjB,SAAK,mBAAmB,KAAK,iBAAiB,KAAK,IAAI;AAAA,EAC3D;AAAA,EACA,iBAAiB;AACb,WAAO,CAAC,GAAG,KAAK,KAAK,UAAU,EAAE,KAAK,UAAQ;AAC1C,UAAI,KAAK,aAAa,KAAK,aAAa,KAAK,YAAY,KAAK,MAAM,IAAI;AACpE,eAAO;AAAA,MACX;AACA,UAAI,KAAK,aAAa,KAAK,cAAc;AACrC,cAAM,KAAK;AACX,YAAI,CAAC,GAAG,aAAa,MAAM,GAAG;AAC1B,iBAAO;AAAA,QACX;AAAA,MACJ;AACA,aAAO;AAAA,IACX,CAAC;AAAA,EACL;AAAA,EACA,aAAa,MAAM;AACf,WAAO,KAAK,KAAK,cAAc,mBAAmB,QAAQ,MAAM;AAAA,EACpE;AAAA,EACA,KAAK,UAAU;AACX,WAAO,aAAa,cAAc,KAAK,eAAe,IAAI,KAAK,aAAa,QAAQ;AAAA,EACxF;AAAA,EACA,gBAAgB;AACZ,SAAK,KAAK,WAAW,iBAAiB,cAAc,KAAK,gBAAgB;AAAA,EAC7E;AAAA,EACA,mBAAmB;AACf,SAAK,KAAK,WAAW,oBAAoB,cAAc,KAAK,gBAAgB;AAAA,EAChF;AAAA,EACA,iBAAiB,OAAO;AACpB,UAAM,OAAO,MAAM;AACnB,QAAK,CAAC,KAAK,QAAQ,KAAK,UAAU,SAAS,WAAW,KAAO,CAAC,CAAC,KAAK,QAAQ,KAAK,UAAU,SAAS,KAAK,IAAI,GAAI;AAC7G,WAAK,KAAK,cAAc;AAAA,IAC5B;AAAA,EACJ;AACJ;AAcA,SAAS,eAAe,MAAM;AAC1B,QAAM,QAAQ,KAAK,cAAc,EAAE,SAAS,KAAK,CAAC;AAClD,MAAI,OAAO;AACX,GAAC,GAAG,KAAK,EAAE,QAAQ,UAAQ;AACvB,QAAI,KAAK,aAAa,KAAK,WAAW;AAClC,cAAQ,KAAK;AAAA,IACjB;AAAA,EACJ,CAAC;AACD,SAAO;AACX;",
  "names": []
}
